package Object_grammer09;

public class ch14_01_람다식 {
    /*******************************************************************
     * 람다식(Lambda Expression)
     * 함수(메서드)를 간단한 식(expression)으로 표현하는 방법
     *
     * 익명 함수(anonymous function)
     * - 메서드는 객체지향개념 용어
     * - 함수는 클래스에 독립적, 메서드는 클래스에 종속적
     ******************************************************************/
    public static void main(String[] args) {
        /*******************************************************************
         * 람다식 작성하기
         * 1. 메서드의 이름과 반환타입을 제거하고 화살표(->)를 블록({}) 앞에 추가한다.
         * 2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에 ; 안붙임)
         *    ex : (int a, int b) -> a > b ? a : b
         * 3. 매개변수의 타입이 추론 가능하면 생략가능(대부분의 경우 생략가능)
         *    ex : (a, b) -> a > b ? a : b
         ******************************************************************/
        /*******************************************************************
         * 주의사항
         * 1. 매개변수가 하나임 경우, 괄호() 생략가능(타입이 없을 때만)
         *    ex : a -> a * a
         * 2. 블록 안의 문장이 하나뿐 일 때, 괄호{} 생략가능(끝에 ';' 안붙임)
         *    ex : (int i) -> System.out.println(i)
         * 3. 단, 하나뿐인 문장이 return문이면 괄호{} 생략불가
         ******************************************************************/
        /*******************************************************************
         * 람다식은 익명함수? 익명객체!
         * 람다식은 익명함수가 아니라 익명 객체이다.
         * 람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
         ******************************************************************/
        
        // 람다식, 익명객체 생성
        // (모든 메서드는 객체안에 있어야 한다.)
        Object obj = new Object(){
            int max(int a, int b){
                return a > b ? a : b;
            }
        };

//        int value = obj.max(3, 5); // error!! obj객체에는 max 리모컨이 없음
//                                   // 함수형 인터페이스가 필요함
    }
}
