public class Stream_00 {
    /************************************************************************************************
     * 스트림(Stream)
     * 다양한 데이터 소스를 표준화된 방법으로 다루기 위한 것
     * 데이터 소스가 무엇이던 간에 같은 방식으로 다룰 수 있게 되었다는 것과 코드의 재사용성이 높아진다는 것을 의미한다.
     *
     * 1. 스트림만들기 -> 2. 중간연산(0~N번) -> 3. 최종연산(0~1번)
     * 스트림은 데이터 소스로부터 데이터를 읽기만할 뿐 변경하지 않는다.
     * 최종연산이 끝난 스트림은 새로 만들어서 사용해야 한다.
     ************************************************************************************************/
    
    public static void main(String[] args) {

        /************************************************************************************************
         * 스트림의 특징
         * 1. 스트림은 데이터소스를 변경하지 않는다
         * 2. 스트림은 일회용이다, 한번 사용하면 닫혀서 다시 사용할 수 없다. (필요하다면 스트림을 다시 생성해야함)
         * 3. 스트림은 작업을 내부 반복으로 처리한다. ( .forEach(System.out::println); )
         * 4. 지연된 연산 (스트림 연산은 최종 연산이 수행되기 전까지는 중간연산이 수행되지 않는다는 것이다.)
         * 5. 기본형을 참조형로 변환하는 오토박싱&언박싱으로 인한 비효율을 줄이기 위해
         *    데이터 소스의 요소를 기본형으로 다루는 스트림 ( IntStream, LongStream, DoubleStream )이 제공된다.
         * 6. 병렬 스트림 ( .parallel() )
         *    int sum =  strStream.parallel().mapToInt(s -> s.length()).sum();
         ************************************************************************************************/
    }
}
